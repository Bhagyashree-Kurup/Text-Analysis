# -*- coding: utf-8 -*-
"""Sentiment analysis model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gJrt6BOYTCpwxazuP0Wcdw90_fFKBZ6U
"""

#Importing libraries
import numpy as np
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

#Importing dataset
dataset = pd.read_csv('./drive/MyDrive/a1_RestaurantReviews_HistoricDump.tsv', delimiter = '\t', quoting = 3)

dataset.shape

dataset.head()

# Importing python's regular expression and natural language toolkit
import re
import nltk

# downloading stopwords file
nltk.download('stopwords')

from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()

all_stopwords = stopwords.words('english')
all_stopwords.remove('not')

# corpus declared for storing data after data cleaning
corpus=[]

for i in range(0, 900):
  # removing all special characters and numbers
  review = re.sub('[^a-zA-Z]', ' ', dataset['Review'][i])
  # changes reviews into lower case 
  review = review.lower()
  # splitting the sentence into words
  review = review.split()
  # removing all stopwords and stemming/lemmatizing the remaining words
  review = [ps.stem(word) for word in review if not word in set(all_stopwords)]
  review = ' '.join(review)
  corpus.append(review)

corpus

# Bag of words
# '1420' --> selecting 1420 most used tokens and dropping the rest
from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 1420)

# Storing BOW in x
X = cv.fit_transform(corpus).toarray()
# Storing original labels in y
Y = dataset.iloc[:, -1].values

# Saving BoW dictionary for later use in sentiment prediction 
import pickle
bow_path = './drive/MyDrive/c1_BoW_Sentiment_Model.pkl'
pickle.dump(cv, open(bow_path, "wb"))

# Train test splitting
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.20, random_state = 0)

# Naive Bayes classifier and fitting it to 
from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(X_train, Y_train)

# Exporting NB Classifier to later use in sentiment prediction
import joblib
joblib.dump(classifier, './drive/MyDrive/c2_Classifier_Sentiment_Model')

# Performance of the model
Y_pred = classifier.predict(X_test)

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(Y_test, Y_pred)
print(cm)

accuracy_score(Y_test, Y_pred)